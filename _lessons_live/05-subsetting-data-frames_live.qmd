---
title: "Subsetting data frames"
output: html
embed-resources: true
editor_options: 
  chunk_output_type: console
---


# Data frames

Recall our `cats` data frame:

```{r}
cats <-  data.frame(coat = c("calico", "black", "tabby"),
                   weight = c(2.1, 5.0, 3.2),
                   likes_string = c(1, 0, 1))
cats
```


Each column of a data frame is a vector.







## Extracting columns from a data frame

### The dollar sign syntax `$`


```{r}
# Using `$`, extract the coat column

```

What type of object does this return?








### The square bracket syntax with one dimension `[j]`

We can extract individual columns using `[j]`

```{r}
# Using `[j]`, extract the first column 

```

What type of object does this return?





This `[j]` syntax also works with *named* indexing. 

```{r}
# Using `[j]`, extract the "coat" column by name

```








### The square bracket syntax with two dimensions `[i, j]`

`df[i, j]` extracts the entry in the `i`th row and the `j`th column


```{r}
# Using `[i, j]`, extract the third entry from the coat column (the first column)

```


A blank `i` or `j` tells R to extract *all* of the rows or columns

- `df[, j]` will extract all rows for the jth column, and 

- `df[i, ]` will extract the ith row across all columns.


```{r}
# Using `[, j]`, extract the entire first column

```


What type of object does this return?



```{r}
# Using `[i, ]` extract the second row

```

What type of object does this return?








### The double bracket syntax with one dimension `[[]]`

One additional way to extract columns:

```{r}
# using [[]], extract the first column

```


The double bracket syntax also works with named indexing:

```{r}
# using [[]], extract the first column using its name: "coat"

```




Compare this with the single bracket notation:

```{r}
cats[1]
cats["coat"]
```







::: {.callout}

## Challenge 1

There are several subtly different ways to extract observations and elements from data.frames:

- `cats[2]`
- `cats$weight`
- `cats["weight"]`
- `cats[1, 2]`
- `cats[, 2]`
- `cats[3, ]`

Try out these examples and explain what type of object is returned by each one.

:::









## Using logical vectors to subset data frames

To subset the cats data frame to just the rows where the weight of the cats is at least 3:

```{r}
# compute a logical vector to identify which rows correspond to weight > 3

# use this logical vector to subset the cats data

```










::: {.callout}

## Challenge 2

Select only the rows where the *cat's coat is tabby or calico* and return just the values in the *"weight" column*


```{r}
# subset to just the rows where the coat is "tabby" or "calico" and 
# print the values in the "weight" column

```


:::

