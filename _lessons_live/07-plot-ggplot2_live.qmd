---
title: Data visualization with ggplot2
embed-resources: true
editor_options: 
  chunk_output_type: console
---

```{r}
#| message: false
# load the tidyverse library (which includes dplyr and ggplot2)
library(tidyverse) # or library(ggplot2) and library(dplyr)
# load the gapminder dataset for this lesson
gapminder <- read.csv("data/gapminder_data.csv")
```



ggplot2 is built on the *grammar of graphics* which builds plots in *layers*.


Let's start off with an example:

```{r}
# use ggplot to initialize a plot of gapminder using the gdpPercap (x) and lifeExp (y) aesthetics

  # add a scatterplot (points) layer

```

The two top-level functions we have used are `ggplot()` and `geom_point()`.

Notice the use of `+` to add a layer.












::: {.callout}
## Challenge 1
Create a scatterplot of GDP per capita (x) versus lifeExp (y) using just the gapminder data from 2007. 

Hint: use the pipe to pipe the output of a `filter()` function into the `ggplot()` function


:::




An other aesthetic feature is color.

```{r}
# update the previous figure to color by continent

```







## Captions via code chunk options


You can add a caption to a figure in a quarto document by supplying a `label` and `fig-cap` quarto chunk option:


```{r}
#| label: fig-gdp-lifeexp
#| fig-cap: "GDP per capita vs life expectancy"

gapminder |>
  filter(year == 2007) |>
  ggplot(mapping = aes(x = gdpPercap, y = lifeExp, color = continent)) + 
  geom_point()
```

Let's compile our document to check that a caption appeared for this figure!







## Line plots

Let's try to visualize *life expectancy* for each *country* over *time*, coloring our lines by continent

```{r}
# use ggplot() to plot lifeExp versus year as a line plot 
# and try to color the lines by continent

```

Our plot looks strange... what's going on in this plot?






We haven't told ggplot that we want a separate line for each country.

We can do that by adding a `group` argument inside the `aes()` function:

```{r lifeExp-line-by}
# use ggplot() to plot lifeExp versus year as a line plot and group by country
# and try to color the lines by continent

```









## Multiple geom layers

We can visualize both lines and points on the same plot by adding multiple `geom_()` layers:

```{r}
# Compute the average life expectancy for each *continent* and *year*
# e.g., using group_by() and summarize()
# plot x = year, y = avg_life_exp using both *lines* and *points*
# color by continent

```

### Supplying local layer aesthetics

Modify the code in the previous chunk so that aesthetics are being supplied in the local geom layers.

```{r}
# Modify the previous example to apply the color aesthetic just to the lines layer

```








### Setting aesthetics to a uniform (non-data) value


To change the aesthetic of all lines/points to a value that is not dictated by the data, you may think that `aes(color="blue")` should work, but it doesn't.

Let's try to set the color of our points to "blue":

```{r}
# create a scatterplot of gdpPercap against lifeExp for the 2007 data
# but try to set the color of all of the points to "blue" inside aes():

```


When setting an aesthetic to a value that does not correspond to a variable from our data, we need to move the color specification outside of the `aes()` function:

```{r}
# fix the above code by moving the `color` argument outside `aes()`

```







### Transparency

Another aesthetic value that is helpful is adding transparency using `alpha`:



```{r}
# Add transparency (alpha = 0.2) to the plot below
ggplot(gapminder) +
  geom_line(aes(x = year, y = lifeExp, group = country), 
            color = "blue") 
```
















## Transformations

Recall our scatterplot of gdpPercap vs lifeExp for 2007:

```{r}
gapminder |> 
  filter(year == 2007) |>
  ggplot(aes(x = gdpPercap, y = lifeExp)) +
  geom_point(alpha = 0.2)
```


Let's add a *scale* layer to present the x-axis on a log10 scale:

```{r}
gapminder |> 
  filter(year == 2007) |>
  ggplot(aes(x = gdpPercap, y = lifeExp)) +
  geom_point(alpha = 0.2)
# add a log-10 scale for the x-axis to the plot above
```













### Adding a linear fit

We can also fit a simple relationship to the data by adding another layer,
`geom_smooth()`:

```{r}
gapminder |> filter(year == 2007) |>
  ggplot(aes(x = gdpPercap, y = lifeExp)) +
  geom_point(alpha = 0.5) +
  scale_x_log10() 
# add a lm smooth layer to the plot above using geom_smooth(method = "lm")
```

What happens when you add `color = continent` to the global `aes()` function?













::: {.callout}
## Challenge 2a
Modify the following code so that all of the *points* are colored "orange" and have `size` equal to 3.

```{r}
gapminder |> filter(year == 2007) |>
  ggplot(aes(x = gdpPercap, y = lifeExp)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "lm") +
  scale_x_log10()
```
:::

::: {.callout}
## Challenge 2b

Modify your solution to Challenge 2a so that the `color` of the *points layer* (but not the smooth layer) is instead determined by the `continent` variable and the `size` is determined by the `pop` variable. You should only have one smooth line in your final plot.

:::
















## Multi-panel figures

Earlier we visualized the change in life expectancy over time across all
countries in one plot like this:

```{r}
ggplot(gapminder, aes(x = year, y = lifeExp, color = continent, group = country)) +
  geom_line()
```

Another way to view this data is to create a separate plot for each continent using `facet_wrap()`:

```{r}
# create a grid of line plots of year vs lifeExp for the countries in each continent
# using facet_wrap()

```




::: {.callout}
## Challenge 3

Create a faceted set of line plots for life expectancy versus year for each country *in the Americas* (e.g., each facet will contain the individual line plot for a single country in the Americas).

:::











## Modifying labels

You can add labels to plots using the `labs()` function.

```{r}
gapminder |> 
  filter(country == "Brazil") |>
  ggplot() +
  geom_line(aes(x = year, y = lifeExp)) 
# Add reasonable labels to the plot above
```




::: {.callout}
## Challenge 6

Using `geom_boxplot()`, generate boxplots to compare life expectancy between the different continents (set `x = continent` and `y = lifeExp`), faceted by year. 

Color each boxplot by continent and rename each label so that it is nicely formatted and human-readable.

:::












## Built-in themes


There are several themes for making your plots even prettier. For example, 

- `theme_classic()`:

```{r}
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) +
  geom_point(aes(size = pop, color = continent)) +
  scale_x_log10() 
# add theme_classic() to the plot above
```





- `theme_minimal()`:

```{r}
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) +
  geom_point(aes(size = pop, color = continent)) +
  scale_x_log10() 
# add theme_minimal() to the plot above
```





- `theme_bw()`:

```{r}
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp)) +
  geom_point(aes(size = pop, color = continent)) +
  scale_x_log10() 
# add theme_bw() to the plot above
```

