---
title: "Subsetting vectors"
output: html
embed-resources: true
editor_options: 
  chunk_output_type: console
---


## Subsetting vectors


We can extract individual elements of a vector by using the square bracket notation:

```{r}
# create a sequence_example vector of integers from 20 to 25

# extract the first element and store it in a variable called first_element

# take a look at the first_element variable

```

To change a single element, use the bracket on the other side of the arrow:

```{r}
# reassign the first element of sequence_example to 30

# print out sequence_example

```
 
 
 
 
 
 

### Extracting multiple elements at once

We can ask for multiple elements at once by providing a *vector* of indices:

```{r}
# extract the first and third element of x using a vector created with `c()`

```

You can ask for the same element multiple times:

```{r}
# extract the first, first and third element from x using `c()`

```




Or "slices" of the vector using a sequential integer vector index:

```{r}
# extract the first four elements of x using a vector created with `:`

```





### Indexing out of bounds

If you ask for an index beyond the length of the vector, R will return a missing value:

```{r}
# extract the non-existent sixth element from x

```











### Removing elements

If you use a negative number as the index of a vector, R will return every element *except* for the one specified:

```{r}
# remove the second entry from x

```

We can remove multiple elements:

```{r}
# remove the first and fifth elements from x

```






### Order of operations

It's natural to try to negate a sequence like `-1:3` (this should give an error):

```{r}
#| error: true
# Try to remove the 1st-3rd elements from x using `:`

```


Why didn't this work?


```{r}
# print out the sequence of integers being used for indexing

```


The correct solution is to wrap `1:3` in brackets so that the `-` operator applies to the result:

```{r}
# correctly remove elements 1-3 using parentheses

```







::: {.callout}
## Challenge 1

Given the following vector:
```{r}
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
x
```

Come up with at least 2 different commands that will produce the following output:

```{verbatim}
[1] 6.2 7.1 4.8
```

and write them in the following code chunk

```{r}
# your answers:


```


:::





## Names

Each element of a vector can be given a name:

```{r}
# define a named pizza_price vector 

# look at the result

```




Alternatively, these names can be assigned after defining the vector:

```{r}
# define unnamed pizza price vector

# assign the names to pizza price using "names()"

# look at the result

```









### Accessing vectors by name


To retrieve a named entry from a vector:

```{r}
# extract the first entry from the pizza price vector using named indexing

```

This is equivalent to extracting the first entry of the vector:

```{r}
# extract the first entry from pizza_price using numbered indexing

```







If you want to extract just the names of an object, use the `names()` function:

```{r}
# use `names()` to print the names of pizza_price

```








::: {.callout}
## Challenge 3

Define the following vector, `y`, and extract the "a" and "c" entries from it:

```{verbatim}
  a   b   c   d   e 
5.4 6.2 7.1 4.8 7.5 
```



:::




::: {.callout}
## Challenge 4

What is the data type of the *names* of `pizza_price`? 

:::



